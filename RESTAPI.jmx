<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Edirne" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Edirne</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
              </elementProp>
              <elementProp name="appid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">aeea59b74d473337656771586485cc82</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">appid</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.openweathermap.org</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">data/2.5/weather</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">extract_edirne</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.weather[:1].main</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            <stringProp name="Scope.variable">weathersituation</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def baseUrl = vars.get(&quot;https://api.openweathermap.org&quot;);
def apiKey = vars.get(&quot;aeea59b74d473337656771586485cc82&quot;);
def il1 = vars.get(&quot;extract_edirne&quot;);
def durum = vars.get(&quot;il1Durum&quot;);
def karsilastirma;
String yagissiz=[&quot;Clouds&quot;,&quot;Dust&quot;,&quot;Mist&quot;,&quot;Smoke&quot;,&quot;Haze&quot;,&quot;Fog&quot;,&quot;Sand&quot;,&quot;Ash&quot;,&quot;Squall&quot;,&quot;Tornado&quot;,&quot;Clear&quot;]
String yagisli=[&quot;Snow&quot;,&quot;Thunderstorm&quot;,&quot;Drizzle&quot;,&quot;Rain&quot;]
	il1HavaDurumu=vars.get(&quot;extract_edirne&quot;);
	vars.put(&quot;il1HavaDurum&quot;,il1HavaDurumu);
	if(yagisli.contains(il1HavaDurumu))
      {
        	vars.put(&quot;il1Durum&quot;,&quot;Yağışlı&quot;);
        	log.info(&quot;il1 Yağışlı&quot;);
      }
    	else
    	 {
 		vars.put(&quot;il1Durum&quot;,&quot;Yağışsız&quot;);
        	log.info(&quot;il1 Yağışsız&quot;);
      }
    		
     
/*pm.test(&quot;1. il Hava Durumu&quot;,function(){
    pm.sendRequest(baseUrl+&quot;/data/2.5/weather?q=&quot;+il1+&quot;&amp;appid=&quot;+apiKey, function (err, response) {
    il1HavaDurumu=response.json()[&quot;weather&quot;][0].main
    pm.environment.set(&quot;İl1HavaDurum&quot;,il1HavaDurumu)

    if(yagisli.includes(il1HavaDurumu))
    {
        pm.environment.set(&quot;İl1Durum&quot;,&quot;Yağışlı&quot;)
        console.log(&quot;İl1 Yağışlı&quot;)
    }
    else
    {
        pm.environment.set(&quot;İl1Durum&quot;,&quot;Yağışsız&quot;)
        console.log(&quot;İl1 Yağışsız&quot;)
    }
    var testmessage=pm.environment.get(&quot;İl1Durum&quot;)
    pm.test(&quot;İl1 Hava Durumu=&quot;+testmessage)
    });
    }); */
</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Canakkale" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Canakkale</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
              </elementProp>
              <elementProp name="appid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">559a9ac258b96860389d7debacfbdca6</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">appid</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.openweathermap.org</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">data/2.5/weather</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">extract_canakkale</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.weather[:1].main</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def baseUrl = vars.get(&quot;https://api.openweathermap.org&quot;);
def apiKey = vars.get(&quot;559a9ac258b96860389d7debacfbdca6&quot;);
def il2 = vars.get(&quot;extract_canakkale&quot;);
def durum = vars.get(&quot;il2Durum&quot;);
def karsilastirma;
String yagissiz=[&quot;Clouds&quot;,&quot;Dust&quot;,&quot;Mist&quot;,&quot;Smoke&quot;,&quot;Haze&quot;,&quot;Fog&quot;,&quot;Sand&quot;,&quot;Ash&quot;,&quot;Squall&quot;,&quot;Tornado&quot;,&quot;Clear&quot;]
String yagisli=[&quot;Snow&quot;,&quot;Thunderstorm&quot;,&quot;Drizzle&quot;,&quot;Rain&quot;]
	il2HavaDurumu=vars.get(&quot;extract_canakkale&quot;);
	vars.put(&quot;il2HavaDurum&quot;,il2HavaDurumu);
	if(yagisli.contains(il2HavaDurumu))
      {
        	vars.put(&quot;il2Durum&quot;,&quot;Yağışlı&quot;);
        	log.info(&quot;il2 yağışlı&quot;);
      }
    	else
    	 {
  	 	vars.put(&quot;il2Durum&quot;,&quot;Yağışsız&quot;);
        	log.info(&quot;il2 yağışsız&quot;);
      }
    		
    		OUT.print(durum);

String var1 = vars.get(&quot;il1Durum&quot;);
String var2 = vars.get(&quot;il2Durum&quot;);

Failure = !var1.equals(var2);

if (Failure) {
	vars.put(&quot;karsilastirma&quot;,&quot;Failed&quot;);
     log.info(&quot;İki Durum da Farklı&quot;);
}
else
{
	vars.put(&quot;karsilastirma&quot;,&quot;Passed&quot;);
     log.info(&quot;İki durum da Aynı&quot;);
}
    		

    
    		
    	
     
    		
    		
    		</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">String var1 = vars.get(&quot;il1Durum&quot;);
String var2 = vars.get(&quot;il2Durum&quot;);

Failure = !var1.equals(var2);

if (Failure) {
	vars.put(&quot;karsilastirma&quot;,&quot;Failed&quot;);
     log.info(&quot;İki Durum da Farklı&quot;);
}
else
{
	vars.put(&quot;karsilastirma&quot;,&quot;Passed&quot;);
     log.info(&quot;İki durum da Aynı&quot;);
}
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">if((&quot;il1Durum&quot;)!=(&quot;il2Durum&quot;))
{
	Failure=false;
     vars.put(&quot;karsilastirma&quot;,&quot;Passed&quot;);
     log.info(&quot;İki Durum da Aynı&quot;);
}
else
{  
	Failure=true;
     vars.put(&quot;karsilastirma&quot;,&quot;Failed&quot;);
     log.info(&quot;İki durum da farklı&quot;);
}
     </stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
